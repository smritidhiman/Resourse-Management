<?php

namespace Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntitiesEmployeeProxy extends \Entities\Employee implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getEmpId()
    {
        $this->__load();
        return parent::getEmpId();
    }

    public function setEmpName($empName)
    {
        $this->__load();
        return parent::setEmpName($empName);
    }

    public function getEmpName()
    {
        $this->__load();
        return parent::getEmpName();
    }

    public function setEmpCode($empCode)
    {
        $this->__load();
        return parent::setEmpCode($empCode);
    }

    public function getEmpCode()
    {
        $this->__load();
        return parent::getEmpCode();
    }

    public function setEmpDesignation($empDesignation)
    {
        $this->__load();
        return parent::setEmpDesignation($empDesignation);
    }

    public function getEmpDesignation()
    {
        $this->__load();
        return parent::getEmpDesignation();
    }

    public function setDateOfJoining($dateOfJoining)
    {
        $this->__load();
        return parent::setDateOfJoining($dateOfJoining);
    }

    public function getDateOfJoining()
    {
        $this->__load();
        return parent::getDateOfJoining();
    }

    public function setEmailId($emailId)
    {
        $this->__load();
        return parent::setEmailId($emailId);
    }

    public function getEmailId()
    {
        $this->__load();
        return parent::getEmailId();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setUserType($userType)
    {
        $this->__load();
        return parent::setUserType($userType);
    }

    public function getUserType()
    {
        $this->__load();
        return parent::getUserType();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'empId', 'empName', 'empCode', 'empDesignation', 'dateOfJoining', 'emailId', 'username', 'password', 'userType');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}